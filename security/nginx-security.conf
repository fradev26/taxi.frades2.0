# ðŸ”’ Production Security Configuration

# Security Headers (to be added to nginx.conf)
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Permissions-Policy "geolocation=(self), microphone=(), camera=(), payment=(self)" always;

# Strict Content Security Policy
add_header Content-Security-Policy "
    default-src 'self';
    script-src 'self' 'unsafe-inline' 'unsafe-eval' 
        https://www.googletagmanager.com 
        https://www.google-analytics.com 
        https://static.hotjar.com 
        https://script.hotjar.com 
        https://maps.googleapis.com 
        https://js.stripe.com;
    style-src 'self' 'unsafe-inline' 
        https://fonts.googleapis.com;
    font-src 'self' 
        https://fonts.gstatic.com;
    img-src 'self' data: blob: 
        https://www.google-analytics.com 
        https://maps.googleapis.com 
        https://maps.gstatic.com;
    connect-src 'self' 
        https://api.taxi-frades.com 
        https://www.google-analytics.com 
        https://maps.googleapis.com 
        https://api.stripe.com 
        https://*.supabase.co 
        wss://*.supabase.co;
    frame-src 'self' 
        https://js.stripe.com 
        https://hooks.stripe.com;
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    upgrade-insecure-requests;
" always;

# HSTS (HTTP Strict Transport Security)
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# Rate Limiting Zones
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=booking:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=payment:10m rate=5r/m;

# DDoS Protection
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn conn_limit_per_ip 50;

# Hide server information
server_tokens off;
more_set_headers "Server: ";

# SSL Configuration (modern configuration)
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 1d;
ssl_session_tickets off;

# OCSP Stapling
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

# Security-focused locations
location ~ /\.(ht|git|svn) {
    deny all;
    return 404;
}

location ~ \.(sql|bak|backup|log)$ {
    deny all;
    return 404;
}

# API Security
location /api/auth/ {
    limit_req zone=login burst=3 nodelay;
    # Additional auth-specific security headers
    add_header Cache-Control "no-store, no-cache, must-revalidate" always;
    add_header Pragma "no-cache" always;
}

location /api/booking/ {
    limit_req zone=booking burst=5 nodelay;
}

location /api/payment/ {
    limit_req zone=payment burst=2 nodelay;
    # Extra security for payment endpoints
    add_header Cache-Control "no-store, no-cache, must-revalidate" always;
}

# Firewall Rules (to be implemented at infrastructure level)
# Block common attack patterns
location ~ \.(php|asp|aspx|jsp)$ {
    return 444;
}

# Block user agents commonly used by bots/scanners
if ($http_user_agent ~* (nikto|sqlmap|fimap|nessus|openvas|nmap|masscan)) {
    return 444;
}

# Block requests with suspicious query strings
if ($query_string ~ "(\<|%3C).*script.*(\>|%3E)") {
    return 444;
}

if ($query_string ~ "GLOBALS(\[|\%5B)") {
    return 444;
}

if ($query_string ~ "_REQUEST(\[|\%5B)") {
    return 444;
}

# Logging for security events
error_log /var/log/nginx/security.log;
access_log /var/log/nginx/access.log combined;

# Custom log format for security monitoring
log_format security_log '[$time_local] $remote_addr - $remote_user "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time ut="$upstream_response_time"';

access_log /var/log/nginx/security.log security_log;